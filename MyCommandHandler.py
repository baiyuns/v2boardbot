from telegram import Update, ChatPermissions
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
)

from Config import config
from models import V2User
from v2board import _bind, _checkin, _traffic, _lucky, _unbind, _wallet
from Utils import START_ROUTES

MENU_TEXT = """
ËèúÂçïÔºö
üí∞ ÊàëÁöÑÈí±ÂåÖ - ÂõûÂ§ç /wallet
üìÉ ÊµÅÈáèÊü•ËØ¢ - ÂõûÂ§ç /traffic
‚ú® Âπ∏ËøêÊäΩÂ•ñ - ÂõûÂ§ç /lucky
üìí ÊàëÁöÑËÆ¢ÈòÖ - ÂõûÂ§ç /sub
üìÖ Á≠æÂà∞ - ÂõûÂ§ç /checkin
üåê ËäÇÁÇπÁä∂ÊÄÅ - ÂõûÂ§ç /node
üîó ËÆ¢ÈòÖÈìæÊé• - ÂõûÂ§ç /mysub
üé∞ ËµåÂçöÊ®°Âºè - ÂõûÂ§ç /gambling
üé∞ ÂºÄÂ•ñËÆ∞ÂΩï - ÂõûÂ§ç /slots
üé≤ ‰∏ãÊ≥®(ÂºÄÂèë‰∏≠) - ÂõûÂ§ç /dice
Ver:20230924.1 main - https://github.com/v2boardbot/v2boardbot
"""

# Á≠æÂà∞
async def command_checkin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = _checkin(update.effective_user.id)
    await update.message.reply_text(text=f"{text}\n\n{MENU_TEXT}")
    return START_ROUTES

# ÁªëÂÆö
async def command_bind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != 'private':
        await update.message.reply_text(text=f'ÁªëÂÆöÁî®Êà∑‰ªÖÈôêÁßÅËÅä‰ΩøÁî®ÔºåËØ∑ÁßÅËÅäÊú∫Âô®‰∫∫\n\n{MENU_TEXT}')
        return START_ROUTES
    try:
        token = context.args[0].split('token=')[-1]
    except:
        await update.message.reply_text(text=f'ÂèÇÊï∞ÈîôËØØÔºåËØ∑ÂèëÈÄÅ "/bind ËÆ¢ÈòÖÈìæÊé•"\n\n{MENU_TEXT}')
        return START_ROUTES
    text = _bind(token, update.effective_user.id)
    if text == 'ÁªëÂÆöÊàêÂäü':
        chat_id = context.user_data['chat_id']
        user_id = context.user_data['user_id']
        verify_type = context.user_data['verify_type']
        if verify_type == 'prohibition':
            permissions = ChatPermissions(can_send_messages=True, can_send_media_messages=True,
                                          can_send_other_messages=True)
            await context.bot.restrict_chat_member(chat_id=chat_id, user_id=user_id, permissions=permissions)
        elif verify_type == 'out':
            await context.bot.unban_chat_member(chat_id=chat_id, user_id=user_id, only_if_banned=True)
    await update.message.reply_text(text=f"{text}\n\n{MENU_TEXT}")
    return START_ROUTES

# Ëß£Áªë
async def command_unbind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    if len(context.args) >= 1 and telegram_id == config.TELEGRAM.admin_telegram_id:
        email = context.args[0]
        v2_user = V2User.select().where(V2User.email == email).first()
        telegram_id = v2_user.telegram_id
    text = _unbind(telegram_id)
    await update.message.reply_text(text=f"{text}\n\n{MENU_TEXT}")
    return START_ROUTES

# ÊäΩÂ•ñ
async def command_lucky(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    text = _lucky(telegram_id)
    await update.message.reply_text(text=f"{text}\n\n{MENU_TEXT}")
    return START_ROUTES

# Êü•ÁúãÈí±ÂåÖ
async def command_wallet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    text = _wallet(telegram_id)
    await update.message.reply_text(text=f"{text}\n\n{MENU_TEXT}")
    return START_ROUTES

# ÊµÅÈáèÊü•ËØ¢
async def command_traffic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    telegram_id = update.effective_user.id
    text = _traffic(telegram_id)
    await update.message.reply_text(text=f"{text}\n\n{MENU_TEXT}")
    return START_ROUTES
